import random
import scripts

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType, ParseMode, ChatActions

from replics import Replic
from keyboard import *

bot_token = scripts.get_api_token()

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

rep = Replic()

user_dict = {"in_game": False, "attempts": 0, "number": 0}


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(text=rep.get_helping(), reply_markup=comm_kb)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if user_dict["in_game"]:
        await message.answer(f"–Ø —Ö–æ—Ç–µ–ª –ø–æ–∏–≥—Ä–∞—Ç—å...")
    elif not user_dict["in_game"]:
        first_name = message.from_user.first_name
        await message.reply(rep.get_starting(first_name))


@dp.message_handler(commands=['photo'])
async def process_photo_command(message: types.Message):
    if user_dict["in_game"]:
        await message.answer(f"–ú—ã –∏–≥—Ä–∞–µ–º, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è!")
    else:
        user_id = message.from_user.id
        await bot.send_chat_action(user_id, ChatActions.UPLOAD_PHOTO)
        file = scripts.get_cat_picture()
        capt = "–£—Ä–∞ –∫–æ—Ç—ã!!!"
        await bot.send_photo(user_id, file, reply_to_message_id=message.message_id, caption=capt)


@dp.message_handler(commands=['game'])
async def process_start_command(message: types.Message):
    if user_dict["in_game"]:
        await message.answer(f"–ú—ã —É–∂–µ –∏–≥—Ä–∞–µ–º, —Ä–∞–∑–≤–µ –Ω–µ—Ç?")
    else:
        first_name = message.from_user.first_name
        if not user_dict["in_game"]:
            user_dict["in_game"] = True
            user_dict["number"] = scripts.get_random_num()
            await message.reply(text=rep.get_gaming(first_name), reply_markup=game_kb)


@dp.message_handler(commands=['cancel'])
async def process_start_command(message: types.Message):
    if not user_dict["in_game"]:
        await message.reply(rep.get_cancelling(user_dict["in_game"]))
    elif user_dict["in_game"]:
        user_dict["in_game"] = False
        await message.reply(rep.get_cancelling(user_dict["in_game"]))


@dp.message_handler()
async def echo(message: types.Message):
    if not user_dict["in_game"]:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /help !")
    elif user_dict["in_game"] == True and user_dict["attempts"] == 0:
        if int(message.text) <= 10:
            user_dict["attempts"] = int(message.text)
            await message.answer(f"–•–æ—Ä–æ—à–æ, —É —Ç–µ–±—è {message.text} –ø–æ–ø—ã—Ç–æ–∫.\n–ù–∞—á–Ω–µ–º!")
        else:
            await message.answer(f"–Ø –∂–µ –ø—Ä–æ—Å–∏–ª –Ω–µ –±–æ–ª—å—à–µ 10!\n–ü–æ–¥—É–º–∞–π –µ—â–µ")
    elif user_dict["in_game"] == True and user_dict["attempts"] != 0:
        if int(message.text) == user_dict["number"]:
            user_dict["attempts"] = 0
            user_dict["number"] = 0
            user_dict["in_game"] = False
            await message.answer(f"–ö—Ä–∞—Å–∞–≤–µ–µ–µ–µ–µ—Ü!\n–°—ã–≥—Ä–∞–µ–º –µ—â–µ? /game")
        elif int(message.text) > user_dict["number"]:
            user_dict["attempts"] = user_dict["attempts"] - 1
            attempts = user_dict["attempts"]
            if attempts == 0:
                user_dict["in_game"] = False
                await message.answer(f"–ü–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –º–æ–∂–µ—Ç –ø–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑? /game")
            else:
                await message.answer(f"–ù–µ —É–≥–∞–¥–∞–ª) –ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ! (–æ—Å—Ç–∞–ª–æ—Å—å {attempts} –ø–æ–ø—ã—Ç–æ–∫)")
        else:
            user_dict["attempts"] = user_dict["attempts"] - 1
            attempts = user_dict["attempts"]
            if attempts == 0:
                user_dict["in_game"] = False
                await message.answer(f"–ü–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –º–æ–∂–µ—Ç –ø–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑? /game")
            else:
                await message.answer(f"–ù–µ —É–≥–∞–¥–∞–ª) –ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ! (–æ—Å—Ç–∞–ª–æ—Å—å {attempts} –ø–æ–ø—ã—Ç–æ–∫)")


@dp.message_handler(content_types=ContentType.STICKER)
async def unknown_message(msg: types.Message):
    if user_dict["in_game"]:
        await msg.answer(f"–ú—ã –∏–≥—Ä–∞–µ–º, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è!")
    else:
        message_text = '–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä, –Ω–æ —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å ü•≤.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /help !'
        await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(msg: types.Message):
    if user_dict["in_game"]:
        await msg.answer(f"–ú—ã –∏–≥—Ä–∞–µ–º, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è!")
    else:
        message_text = '–ù–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /help !'
        await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
